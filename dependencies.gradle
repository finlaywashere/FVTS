ext.ntcoreDep = { ->
    /*def classifier
    if (buildType == "windows") {
        classifier = "windows2015"
    } else if (buildType == "linux") {
        classifier = "desktop"
    } else if(buildType == "linux-x86_64"){
	classifier = "desktop"
    } else if(buildType == "linux-x86"){
    	classifier = "desktop"
    } else {
        classifier = buildType
    }*/
    return "edu.wpi.first.ntcore:ntcore-java:+"
}
ext.tntcoreDep = { ->
    /*def classifier
    if (testType == "windows") {
        classifier = "windows2015"
    } else if (testType == "linux") {
        classifier = "desktop"
    } else if(testType == "linux-x86_64"){
        classifier = "desktop"
    } else if(testType == "linux-x86"){
        classifier = "desktop"
    } else {
        classifier = testType
    }*/
    return "edu.wpi.first.ntcore:ntcore-java:+"
}

ext.cscoreDep = { ->
/*	def classifier
	
	if(buildType == "linux-x86_64" || buildType == "linux-x86"){
		classifier = "linux";
	}else if(buildType == "windows"){
		classifier = "windows2015";
	}else{
		classifier = buildType;
	}*/
    return "edu.wpi.first.cscore:cscore-java:+";
}

ext.tcscoreDep = { ->
	/*def classifier
	
	if(testType == "linux-x86_64" || testType == "linux-x86"){
		classifier = "linux";
	}else if(testType == "windows"){
		classifier = "windows2015";
	}else{
		classifier = testType;
	}*/
    return "edu.wpi.first.cscore:cscore-java:+";
}
ext.getOpenCvPlatformPackage = { ->
  /*if (buildType.startsWith("windows")) {
    if (System.getProperty("os.arch").equals("amd64")) {
      return "windowsx86-64"
    } else {
      return "windowsx86"
    }
  } else if (buildType.startsWith("linux")) {
    if (System.getProperty("os.arch").equals("amd64")) {
      return "linuxx86-64"
    }
  } else if (buildType.startsWith("arm-raspbian")) {
    return "linuxraspbian"
  } else {
    return buildType
  }*/
  return buildType
}

ext.tgetOpenCvPlatformPackage = { ->
  /*if (testType.startsWith("windows")) {
    if (System.getProperty("os.arch").equals("amd64")) {
      return "windowsx86-64"
    } else {
      return "windowsx86"
    }
  } else if (testType.equals("linux")) {
    if (System.getProperty("os.arch").equals("amd64")) {
      return "linuxx86-64"
    }
  } else if (testType.equals("arm-raspbian")) {
    return "linuxraspbian"
  } else {
    return testType
  }*/
  return testType
}


task downloadOpenCv() {
    description = 'Downloads the OpenCV Native maven dependency.'
    group = 'WPILib'
    def depFolder = "$buildDir/dependencies"
    def cvZip = file("$depFolder/opencv.zip")
    outputs.file(cvZip)
    def armOpenCv

    doFirst {
        def classifier = getOpenCvPlatformPackage()
        def armOpenCvDependency = project.dependencies.create("edu.wpi.first.thirdparty.frc2020.opencv:opencv-jni:3.4.7-2:$classifier@jar")
        def armOpenCvConfig = project.configurations.detachedConfiguration(armOpenCvDependency)
        armOpenCvConfig.setTransitive(false)
        armOpenCv = armOpenCvConfig.files[0].canonicalFile
    }

    doLast {
        copy {
            from armOpenCv
            rename 'opencv(.+)', 'opencv.zip'
            into depFolder
        }
    }
}
task tdownloadOpenCv() {
    description = 'Downloads the OpenCV Native maven dependency.'
    group = 'WPILib'
    def depFolder = "$buildDir/dependencies"
    def cvZip = file("$depFolder/opencv.zip")
    outputs.file(cvZip)
    def armOpenCv

    doFirst {
        def classifier = tgetOpenCvPlatformPackage()
        def armOpenCvDependency = project.dependencies.create("edu.wpi.first.thirdparty.frc2020.opencv:opencv-jni:3.4.7-2:$classifier@jar")
        def armOpenCvConfig = project.configurations.detachedConfiguration(armOpenCvDependency)
        armOpenCvConfig.setTransitive(false)
        armOpenCv = armOpenCvConfig.files[0].canonicalFile
    }

    doLast {
        copy {
            from armOpenCv
            rename 'opencv(.+)', 'opencv.zip'
            into depFolder
        }
    }
}

ext.openCvUnzipLocation = "$buildDir/opencv"

// Create a task that will unzip the wpiutil files into a temporary build directory
task unzipOpenCv(type: Copy) {
    description = 'Unzips the wpiutil maven dependency so that the include files and libraries can be used'
    group = 'WPILib'
    dependsOn downloadOpenCv

    from zipTree(downloadOpenCv.outputs.files.singleFile)
    into openCvUnzipLocation
}

ext.topenCvUnzipLocation = "$buildDir/tests/opencv"

// Create a task that will unzip the wpiutil files into a temporary build directory
task tunzipOpenCv(type: Copy) {
    description = 'Unzips the wpiutil maven dependency so that the include files and libraries can be used'
    group = 'WPILib'
    dependsOn tdownloadOpenCv

    from zipTree(downloadOpenCv.outputs.files.singleFile)
    into topenCvUnzipLocation
}


